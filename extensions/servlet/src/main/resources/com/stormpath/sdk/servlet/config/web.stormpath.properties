#
# Copyright 2016 Stormpath, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Spec properties, as defined at https://github.com/stormpath/stormpath-framework-spec/blob/master/example-config.yaml
stormpath.application.href =
stormpath.application.name =
stormpath.web.basePath =
stormpath.web.oauth2.enabled = true
# The context-relative path an HTTP client may POST to obtain an access token.  The access token can be used by the
# client to authenticate subsequent HTTP requests:
stormpath.web.oauth2.uri = /oauth/token
stormpath.web.oauth2.client_credentials.enabled = true
stormpath.web.oauth2.client_credentials.accessToken.ttl = 3600
stormpath.web.oauth2.password.enabled = true
stormpath.web.oauth2.password.validationStrategy = local
stormpath.web.accessTokenCookie.name = access_token
stormpath.web.accessTokenCookie.httpOnly = true
stormpath.web.accessTokenCookie.secure =
stormpath.web.accessTokenCookie.path =
stormpath.web.accessTokenCookie.domain =
stormpath.web.refreshTokenCookie.name = refresh_token
stormpath.web.refreshTokenCookie.httpOnly = true
stormpath.web.refreshTokenCookie.secure =
stormpath.web.refreshTokenCookie.path =
stormpath.web.refreshTokenCookie.domain =
stormpath.web.produces = application/json,text/html
stormpath.web.register.enabled = true
# The context-relative path to the register ('new user') view:
stormpath.web.register.uri = /register
# The default context-relative path where the user will be redirected after registering:
stormpath.web.register.nextUri = /
stormpath.web.register.autoLogin = false
stormpath.web.register.form.fields.givenName.enabled = true
stormpath.web.register.form.fields.givenName.visible = true
stormpath.web.register.form.fields.givenName.label = stormpath.web.register.form.fields.givenName.label
stormpath.web.register.form.fields.givenName.placeholder = stormpath.web.register.form.fields.givenName.placeholder
stormpath.web.register.form.fields.givenName.required = true
stormpath.web.register.form.fields.givenName.type = text
stormpath.web.register.form.fields.middleName.enabled = false
stormpath.web.register.form.fields.middleName.visible = true
stormpath.web.register.form.fields.middleName.label = stormpath.web.register.form.fields.middleName.label
stormpath.web.register.form.fields.middleName.placeholder = stormpath.web.register.form.fields.middleName.placeholder
stormpath.web.register.form.fields.middleName.required = true
stormpath.web.register.form.fields.middleName.type = text
stormpath.web.register.form.fields.surname.enabled = true
stormpath.web.register.form.fields.surname.visible = true
stormpath.web.register.form.fields.surname.label = stormpath.web.register.form.fields.surname.label
stormpath.web.register.form.fields.surname.placeholder = stormpath.web.register.form.fields.surname.placeholder
stormpath.web.register.form.fields.surname.required = true
stormpath.web.register.form.fields.surname.type = text
stormpath.web.register.form.fields.username.enabled = false
stormpath.web.register.form.fields.username.visible = true
stormpath.web.register.form.fields.username.label = stormpath.web.register.form.fields.username.label
stormpath.web.register.form.fields.username.placeholder = stormpath.web.register.form.fields.username.placeholder
stormpath.web.register.form.fields.username.required = true
stormpath.web.register.form.fields.username.type = text
stormpath.web.register.form.fields.email.enabled = true
stormpath.web.register.form.fields.email.visible = true
stormpath.web.register.form.fields.email.label = stormpath.web.register.form.fields.email.label
stormpath.web.register.form.fields.email.placeholder = stormpath.web.register.form.fields.email.placeholder
stormpath.web.register.form.fields.email.required = true
stormpath.web.register.form.fields.email.type = email
stormpath.web.register.form.fields.password.enabled = true
stormpath.web.register.form.fields.password.visible = true
stormpath.web.register.form.fields.password.label = stormpath.web.register.form.fields.password.label
stormpath.web.register.form.fields.password.placeholder = stormpath.web.register.form.fields.password.placeholder
stormpath.web.register.form.fields.password.required = true
stormpath.web.register.form.fields.password.type = password
stormpath.web.register.form.fields.confirmPassword.enabled = false
stormpath.web.register.form.fields.confirmPassword.visible = true
stormpath.web.register.form.fields.confirmPassword.label = stormpath.web.register.form.fields.confirmPassword.labe
stormpath.web.register.form.fields.confirmPassword.placeholder = stormpath.web.register.form.fields.confirmPassword.placeholder
stormpath.web.register.form.fields.confirmPassword.required = true
stormpath.web.register.form.fields.confirmPassword.type = password
stormpath.web.register.form.fieldOrder = username,givenName,middleName,surname,email,password,confirmPassword
stormpath.web.register.view = register
# If verify is enabled, the login view will show a link to to a page where users will be able to have the account
# verification email re-sent to them.
# The email verification workflow still needs to be enabled in the Stormpath admin console for this to work.
stormpath.web.verifyEmail.enabled = true
# The context-relative path the user will visit when clicking a link in a verification email after registration
# If this page is not accessed with a ?sptoken=SP_TOKEN_VALUE query parameter, the user will be redirected to
# a page where they can enter their email address to have a verification email resent to them.
stormpath.web.verifyEmail.uri = /verify
# The default context-relative path where the user will be redirected after successfully verifying their email address
# Note: it is *not safe* (insecure) to automatically login a user when they click an email link.
stormpath.web.verifyEmail.nextUri = /login?status=verified
stormpath.web.verifyEmail.view = verify
stormpath.web.verifyEmail.form.fields.email.enabled = true
stormpath.web.verifyEmail.form.fields.email.visible = true
stormpath.web.verifyEmail.form.fields.email.label = stormpath.web.verifyEmail.form.fields.email.label
stormpath.web.verifyEmail.form.fields.email.placeholder = stormpath.web.verifyEmail.form.fields.email.placeholder
stormpath.web.verifyEmail.form.fields.email.required = true
stormpath.web.verifyEmail.form.fields.email.type = text
stormpath.web.login.enabled = true
# The context-relative path to the login view:
stormpath.web.login.uri = /login
# The default context-relative path where the user will be redirected after logging in:
stormpath.web.login.nextUri = /
stormpath.web.login.view = login
stormpath.web.login.form.fields.login.enabled = true
stormpath.web.login.form.fields.login.visible = true
stormpath.web.login.form.fields.login.label = stormpath.web.login.form.fields.login.label
stormpath.web.login.form.fields.login.placeholder = stormpath.web.login.form.fields.login.placeholder
stormpath.web.login.form.fields.login.required = true
stormpath.web.login.form.fields.login.type = text
stormpath.web.login.form.fields.password.enabled = true
stormpath.web.login.form.fields.password.visible = true
stormpath.web.login.form.fields.password.label = stormpath.web.login.form.fields.password.label
stormpath.web.login.form.fields.password.placeholder = stormpath.web.login.form.fields.password.placeholder
stormpath.web.login.form.fields.password.required = true
stormpath.web.login.form.fields.password.type = password
stormpath.web.login.form.fieldOrder = login,password
stormpath.web.logout.enabled = true
# The context-relative path that will log out the user if visited:
stormpath.web.logout.uri = /logout
# The default context-relative path where the user will be redirected after logout:
stormpath.web.logout.nextUri = /
stormpath.web.forgotPassword.enabled =
stormpath.web.forgotPassword.uri = /forgot
stormpath.web.forgotPassword.view = forgot-password
stormpath.web.forgotPassword.nextUri = /login?status=forgot
stormpath.web.forgotPassword.form.fields.email.enabled = true
stormpath.web.forgotPassword.form.fields.email.visible = true
stormpath.web.forgotPassword.form.fields.email.label = stormpath.web.forgotPassword.form.fields.email.label
stormpath.web.forgotPassword.form.fields.email.placeholder =  stormpath.web.forgotPassword.form.fields.email.placeholder
stormpath.web.forgotPassword.form.fields.email.required = true
stormpath.web.forgotPassword.form.fields.email.type = email
stormpath.web.changePassword.enabled =
stormpath.web.changePassword.autoLogin = false
stormpath.web.changePassword.uri = /change
stormpath.web.changePassword.nextUri = /login?status=reset
stormpath.web.changePassword.view = change-password
stormpath.web.changePassword.errorUri = /forgot?status=invalid_sptoken
stormpath.web.idSite.enabled = false
stormpath.web.idSite.loginUri =
stormpath.web.idSite.forgotUri = /#/forgot
stormpath.web.idSite.registerUri = /#/register
stormpath.web.callback.enabled = true
stormpath.web.callback.uri = /stormpathCallback
stormpath.web.social.facebook.uri = /callbacks/facebook
stormpath.web.social.facebook.scope = email
stormpath.web.social.github.uri = /callbacks/github
stormpath.web.social.github.scope = user:email
stormpath.web.social.google.uri = /callbacks/google
stormpath.web.social.google.scope = email profile
stormpath.web.social.linkedin.uri = /callbacks/linkedin
stormpath.web.social.linkedin.scope = r_basicprofile r_emailaddress
stormpath.web.me.enabled = true
stormpath.web.me.uri = /me
stormpath.web.me.expand.apiKeys = false
stormpath.web.me.expand.applications = false
stormpath.web.me.expand.customData = false
stormpath.web.me.expand.directory = false
stormpath.web.me.expand.groupMemberships = false
stormpath.web.me.expand.groups = false
stormpath.web.me.expand.providerData = false
stormpath.web.me.expand.tenant = false

# Java SDK-specific configuration properties

stormpath.client.cacheManager = com.stormpath.sdk.servlet.cache.config.DefaultCacheManagerFactory
stormpath.web.logout.invalidateHttpSession = true
# The context-relative path where an authenticated (already logged in) user will be redirected when attempting to
# access a url they are not allowed to access.
stormpath.web.unauthorized.uri = /unauthorized
# empty property means use ID site defaults:
stormpath.web.idSite.showOrganizationField =
# empty property means use ID site defaults:
stormpath.web.idSite.useSubdomain =
stormpath.web.idSite.OrganizationResolverFactory = com.stormpath.sdk.servlet.filter.config.DefaultIDSiteOrganizationResolverFactory
# Inferred based on heuristics by default.  However if your application is not deployed to an apex domain, like
# myapp.com, you *must* specify your application's base domain, e.g. myapp.mycompany.com
stormpath.web.application.domain =

stormpath.web.request.event.publisher = com.stormpath.sdk.servlet.event.impl.EventPublisherFactory
stormpath.web.request.event.listener = com.stormpath.sdk.servlet.event.RequestEventListenerAdapter

# THE FOLLOWING SECURE RESOLVER SHOULD *ALWAYS* RETURN TRUE IN PRODUCTION, EVEN IN INTRANET/PRIVATE COMPANY APPS.
# A 'false' value *will* make your application vulnerable to identity hijacking attacks.
# The default implementation however allows localhost clients to use non-TLS connections for development
# convenience.  TLS is required for all other clients in order for the cookie to be set.
stormpath.web.cookie.secure.resolver=com.stormpath.sdk.servlet.config.SecureResolverFactory

stormpath.web.account.session.attribute.names = com.stormpath.sdk.account.Account, account

stormpath.web.account.jwt.resolver = com.stormpath.sdk.servlet.filter.account.config.JwtAccountResolverFactory
stormpath.web.account.jwt.factory = com.stormpath.sdk.servlet.filter.account.config.AuthenticationJwtFactoryFactory
# The account cookie is really just a wrapper for a JSON Web Token (JWT).  This next property defines how long the JWT
# itself (the cookie value, not the cookie) is usable before it must be discarded.  This value must always be positive
# (greater than zero) and, if stormpath.web.account.cookie.maxAge is greater than zero, it must be greater than or equal
# to the maxAge value as well.  The default value is your web app's session cookie max age if the max age is greater
# than zero. If your web app's session cookie max age is less than 1, the default is 259200 seconds (3 days).
#
# You only need to modify this value if 1) you do not configure your web app's session cookie max age AND 2) you want
# your users to be 'remembered' longer than 3 days.
stormpath.web.account.jwt.signingKey.resolver = com.stormpath.sdk.servlet.filter.account.DefaultJwtSigningKeyResolver

# CSRF protection
stormpath.web.csrf.token.enabled = true
stormpath.web.csrf.token.manager = com.stormpath.sdk.servlet.csrf.config.CsrfTokenManagerFactory
stormpath.web.csrf.token.ttl = 3600000
stormpath.web.csrf.token.name = csrfToken
# 1 hour nonce cache for CSRF tokens:
stormpath.web.nonce.cache.name = com.stormpath.sdk.servlet.nonces
stormpath.client.cacheManager.caches.com.stormpath.sdk.servlet.nonces.ttl = 3600000

# =========== Servlet Request Behavior ========

stormpath.web.request.factory = com.stormpath.sdk.servlet.filter.config.StormpathServletRequestFactoryFactory
stormpath.web.request.client.attributeNames = client
stormpath.web.request.application.attributeNames = application

# The next property controls the output of httpServletRequest.getRemoteUser() if the user is authenticated.
#
# The value can be one of: email, username, givenName, href or bypass:
#
# email:     getRemoteUser() will return account.getEmail();
# username:  returns account.getUsername();
# givenName: returns account.getGivenName();
# href:      returns account.getHref();
# bypass:    disables Stormpath behavior for this property and falls back to the Servlet Container's implementation.
#
stormpath.web.request.remoteUser.strategy = username

# The next property controls the output of httpServletRequest.getUserPrincipal() if the user is authenticated.
#
# The value can be one of: account, email, username, givenName, href or bypass:
#
# account:   returns a com.stormpath.sdk.servlet.http.AccountPrincipal that represents the entire Account object
# email:     returns a com.stormpath.sdk.servlet.http.EmailPrincipal matching account.getEmail()
# username:  returns a com.stormpath.sdk.servlet.http.UsernamePrincipal matching account.getUsername()
# givenName: returns a com.stormpath.sdk.servlet.http.GivenNamePrincipal matching account.getGivenName()
# href:      returns a com.stormpath.sdk.servlet.http.HrefPrincipal matching account.getHref()
# bypass:    disables Stormpath behavior for this property and falls back to the Servlet Container's implementation.
#
stormpath.web.request.userPrincipal.strategy = account

stormpath.web.message.source = com.stormpath.sdk.servlet.i18n.DefaultMessageSource
stormpath.web.locale.resolver = com.stormpath.sdk.servlet.i18n.DefaultLocaleResolver

# =========== Default Servlet Filter Configuration ==========
#

# The AccountResolverFilter determines which user account may be associated with an incoming request and then makes
# that account available for the duration of the request.  It does this by delegating lookup behavior to one or more
# configured Account Resolver implementations.  These implementations are defined by the following property convention:
#
# stormpath.web.account.resolvers.RESOLVER_NAME = RESOLVER_IMPLEMENTATION_FULLY_QUALIFIED_CLASS_NAME
#
# Where:
#   * RESOLVER_NAME is a simple name/alias to give to the resolver, for example, 'cookie' or 'header'
#   * RESOLVER_IMPLEMENTATION_FULLY_QUALIFIED_CLASS_NAME is the fully qualified class name of an implementation
#     implements the com.stormpath.sdk.servlet.http.Resolver interface (and returns com.stormpath.sdk.account.Account
#     instances).
#
# This convention defines the 'pool' of all available account resolvers.  The ones actually used in your application are
# defined by specifying a comma-delimited list of resolver names via the
# stormpath.web.account.resolvers property as described next.
#
# Resolver Order
#
# When a Resolver returns an Account instance, all remaining Resolvers are ignored.  Resolvers are invoked in the order
# that they are specified in the following comma-delimited list.  Be sure to specify resolver names in the
# order that you prefer request locations to be checked:
stormpath.web.account.resolvers = header, cookie, session

# Authorization Header Account Resolver: inspects the HTTP 'Authorization' header using all
# available HTTP Authentication Schemes. Available schemes are defined by the following property name/value convention:
#
# stormpath.web.http.authc.schemes.SCHEME_NAME = SCHEME_IMPLEMENTATION_FULLY_QUALIFIED_CLASS_NAME
#
# See the default stormpath.web.http.authc.schemes.* properties below for examples.
stormpath.web.account.resolvers.header = com.stormpath.sdk.servlet.filter.account.config.AuthorizationHeaderAccountResolverFactory

# Cookie Account Resolver: looks for a secure digitally signed cookie that contains the account's information.  The
# cookie itself is created and set by the stormpath.web.authc.saver.cookie implementation.
stormpath.web.account.resolvers.cookie = com.stormpath.sdk.servlet.filter.account.config.CookieAccountResolverFactory

# Session Account Resolver: looks in an available HTTP session for the account.  This implementation does not create
# sessions - it will only look in the request's session if the session already exists.
stormpath.web.account.resolvers.session = com.stormpath.sdk.servlet.filter.account.SessionAccountResolver

stormpath.web.localhost.resolver = com.stormpath.sdk.servlet.util.IsLocalhostResolver

stormpath.web.oauth2.authorizer = com.stormpath.sdk.servlet.filter.oauth.config.AccessTokenRequestAuthorizerFactory
# THE FOLLOWING SECURE RESOLVER MUST *ALWAYS* RETURN TRUE IN PRODUCTION, EVEN IN INTRANET/PRIVATE COMPANY APPS.
# This is required by the OAuth 2 specification: https://tools.ietf.org/html/rfc6749#section-3.2
# A 'false' value *will* make your application vulnerable to identity hijacking attacks.
# The default implementation however allows localhost clients to use non-TLS connections for development
# convenience.  TLS is required for all other clients in order for the request to be processed.
stormpath.web.oauth2.authorizer.secure.resolver = com.stormpath.sdk.servlet.config.SecureResolverFactory
stormpath.web.oauth2.origin.authorizer = com.stormpath.sdk.servlet.filter.oauth.config.OriginAccessTokenRequestAuthorizerFactory
stormpath.web.oauth2.origin.authorizer.serverUriResolver = com.stormpath.sdk.servlet.filter.DefaultServerUriResolver
# the following value defaults to empty on purpose: this is only used for additional origin URIs that don't already match
# the server URI:
#stormpath.web.oauth2.origin.authorizer.originUris =

stormpath.web.oauth2.authenticationRequestFactory = com.stormpath.sdk.servlet.filter.oauth.config.AccessTokenAuthenticationRequestFactoryFactory
stormpath.web.oauth2.resultFactory = com.stormpath.sdk.servlet.filter.oauth.config.AccessTokenResultFactoryFactory
stormpath.web.refreshToken.authenticationRequestFactory = com.stormpath.sdk.servlet.filter.oauth.config.RefreshTokenAuthenticationRequestFactoryFactory
stormpath.web.refreshToken.resultFactory = com.stormpath.sdk.servlet.filter.oauth.config.RefreshTokenResultFactoryFactory

stormpath.web.accountStoreResolver = com.stormpath.sdk.servlet.http.authc.DisabledAccountStoreResolver

stormpath.web.authc.saver = com.stormpath.sdk.servlet.filter.account.config.AuthenticationResultSaverFactory

# The storage locations that should be used to save account state after successful authentication.
# The value must be the name of a name stormpath.web.authc.savers.NAME_HERE definition
#
# The value is a comma-delimited list of one or more of cookie, session, or disabled:
#
# cookie:   Store the account state in a cookie.  The cookie's settings are controlled by the
#           stormpath.web.account.cookie.* properties below.  The same cookie is read later when the
#           stormpath.web.account.resolvers property contains a 'cookie' value (without the quotes).
#
# session:  Store the account state in the servlet HTTP session.  This option will create a new HTTP session if one
#           does not yet exist.
#
# disabled: Do not store the account state during a request.  This is a good option if your server-side app
#           authenticates every request (for example, a REST API).
#
stormpath.web.authc.savers = cookie
stormpath.web.authc.savers.cookie = com.stormpath.sdk.servlet.filter.account.config.CookieAuthenticationResultSaverFactory
stormpath.web.authc.unauthenticatedHandler = com.stormpath.sdk.servlet.filter.config.UnauthenticatedHandlerFactory
stormpath.web.authc.usernamePasswordRequestFactory = com.stormpath.sdk.servlet.filter.config.UsernamePasswordRequestFactoryFactory
stormpath.web.authc.savers.session = com.stormpath.sdk.servlet.filter.account.config.SessionAuthenticationResultSaverFactory

stormpath.web.http.authc = com.stormpath.sdk.servlet.http.authc.config.HttpAuthenticatorFactory
# If you set the following value to false and the request must be authenticated, you *must* specify the
# 'authc' filter for the relevant path to enforce authentication.
stormpath.web.http.authc.challenge = true
stormpath.web.http.authc.schemes = basic, bearer
stormpath.web.http.authc.schemes.basic = com.stormpath.sdk.servlet.http.authc.config.BasicAuthenticationSchemeFactory
stormpath.web.http.authc.schemes.bearer = com.stormpath.sdk.servlet.http.authc.config.BearerAuthenticationSchemeFactory

stormpath.web.authz.unauthorizedHandler = com.stormpath.sdk.servlet.filter.config.UnauthorizedHandlerFactory

stormpath.web.login.preHandler=com.stormpath.sdk.servlet.mvc.DisabledWebHandler
stormpath.web.login.postHandler=com.stormpath.sdk.servlet.mvc.DisabledWebHandler
stormpath.web.register.preHandler=com.stormpath.sdk.servlet.mvc.DisabledWebHandler
stormpath.web.register.postHandler=com.stormpath.sdk.servlet.mvc.DisabledWebHandler
stormpath.web.register.enabled.predicate=com.stormpath.sdk.servlet.config.RegisterEnabledPredicate

#see https://github.com/stormpath/stormpath-sdk-java/pull/756
stormpath.web.json.objectMapperFactory=com.stormpath.sdk.servlet.json.ObjectMapperFactory

stormpath.web.account.resolver=com.stormpath.sdk.servlet.account.DefaultAccountResolver
stormpath.web.conneg.resolver=com.stormpath.sdk.servlet.filter.DefaultContentNegotiationResolver
stormpath.web.form.fields.valueResolver=com.stormpath.sdk.servlet.mvc.ContentNegotiatingFieldValueResolver
stormpath.web.filter.chain.manager=com.stormpath.sdk.servlet.config.filter.FilterChainManagerFactory
stormpath.web.filter.chain.resolver=com.stormpath.sdk.servlet.config.filter.FilterChainResolverFactory

stormpath.web.assets.enabled=true
# Empty value means let the filter auto-inspect its runtime environment.  If it cannot be determined however,
# this value will need to be set by the application developer:
stormpath.web.assets.defaultServletName=
stormpath.web.assets.js.enabled = true
stormpath.web.assets.css.enabled = true
